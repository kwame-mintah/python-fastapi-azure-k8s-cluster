trigger:
  branches:
    include:
      - refs/tags/v*

resources:
  - repo: self

variables:
  azureSubscriptionConnection: $(projectAzureSubscriptionConnection)
  azureResourceGroup: $(projectAzureResourceGroup)
  kubernetesCluster: $(projectKubernetesCluster)
  containerRegistry: $(projectContainerRegistry)
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: $(projectDockerRegistryServiceConnection)
  dockerfilePath: "**/Dockerfile"
  imagePullSecret: $(projectImagePullSecret)
  imageRepository: $(projectImageRepository)
  k8sNamespace: "default"
  # Project root folder. Point to the folder file(s).
  projectRoot: $(System.DefaultWorkingDirectory)
  tag: "$(Build.BuildId)"

  # Agent VM image name
  vmImageName: "ubuntu-latest"

stages:
  - stage: Build
    displayName: Build and push docker image
    jobs:
      - job: Build
        displayName: Build and push docker image
        timeoutInMinutes: "5"
        cancelTimeoutInMinutes: "3"
        pool:
          name: $(projectPoolName)
          vmImage: $(vmImageName)
        steps:
          - script: |
              apt-get update
              apt-get install ca-certificates curl gnupg
              install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              chmod a+r /etc/apt/keyrings/docker.gpg

              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                tee /etc/apt/sources.list.d/docker.list > /dev/null
              apt-get update
            workingDirectory: $(projectRoot)
            displayName: "Set up the Docker repository"

          - script: |
              apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y --allow-change-held-packages
              rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*
            workingDirectory: $(projectRoot)
            displayName: "Install the Docker packages"

          - script: |
              service docker start
            workingDirectory: $(projectRoot)
            displayName: "Start the Docker service"

          - task: Docker@2
            displayName: "Build and push an image to container registry"
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)
          - upload: k8s
            artifact: manifests

  - stage: Deploy
    displayName: Deploy to AKS cluster
    dependsOn: Build
    jobs:
      - deployment: Deploy
        displayName: Deploy to AKS cluster
        pool:
          name: $(projectPoolName)
          vmImage: $(vmImageName)
        environment: "Develop Environment"
        strategy:
          runOnce:
            deploy:
              steps:
                - script: |
                    if kubelogin; then
                        echo "kubelogin command found, will skip install"
                    else
                        echo "kubelogin not found will install"
                        az aks install-cli
                    fi
                  workingDirectory: $(projectRoot)
                  displayName: "Install Kubectl and Kubectl login via azure cli"

                - task: KubernetesManifest@1
                  displayName: Create imagePullSecret
                  inputs:
                    action: createSecret
                    connectionType: "azureResourceManager"
                    azureSubscriptionConnection: $(projectAzureSubscriptionConnection)
                    azureResourceGroup: $(projectAzureResourceGroup)
                    kubernetesCluster: $(projectKubernetesCluster)
                    secretName: $(projectImagePullSecret)
                    namespace: $(k8sNamespace)
                    dockerRegistryEndpoint: $(projectDockerRegistryServiceConnection)

                - task: KubernetesManifest@1
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    action: deploy
                    connectionType: "azureResourceManager"
                    azureSubscriptionConnection: $(projectAzureSubscriptionConnection)
                    azureResourceGroup: $(projectAzureResourceGroup)
                    kubernetesCluster: $(projectKubernetesCluster)
                    namespace: $(k8sNamespace)
                    manifests: |
                      $(System.ArtifactsDirectory)/manifests/deployment.yml
                      $(System.ArtifactsDirectory)/manifests/service.yml
                    imagePullSecrets: |
                      $(projectImagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(tag)
                      $(containerRegistry)/$(imageRepository):$(tag)
